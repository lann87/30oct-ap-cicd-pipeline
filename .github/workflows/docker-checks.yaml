# Workflow name that appears in GitHub Actions UI
name: Docker Build and Test

# Define when this workflow should run
on:
  pull_request:
    branches:
      - main    # Only trigger on PRs targeting main branch
    paths:
      - 'docker/*'    # Only trigger when files in docker directory change

jobs:
  # First job: Run unit tests for the code
  code-unit-testing:
    runs-on: ubuntu-latest    # Use latest Ubuntu runner
    outputs:
      status: ${{ job.status }}    # Export job status for build summary
    defaults:
      run:
        working-directory: docker    # Set default working directory for all steps
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.5    # Clone the repository

      - name: Run installation of dependencies commands
        run: npm install    # Install Node.js dependencies

      - name: Run unit testing command
        run: npm test    # Execute unit tests

  # Second job: Build Docker image and scan for vulnerabilities
  build-and-scan-image:
    runs-on: ubuntu-latest
    needs: [code-unit-testing]    # Wait for unit tests to pass
    outputs:
      status: ${{ job.status }}    # Export job status for build summary
    defaults:
      run:
        working-directory: docker
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.5

      # Configure AWS credentials for potential ECR usage
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Build and tag the Docker image
      - name: Docker build and tag
        run: docker build -t simple-docker-image:latest .

      # Authenticate with GitHub Container Registry
      - name: Authenticate with GH Packages
        env:
          GHCR_PAT: ${{ secrets.GITHUB_TOKEN }}    # Use GitHub's automatic token
        run: echo "${GHCR_PAT}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Scan the Docker image for vulnerabilities using Trivy
      - name: Run image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'simple-docker-image:latest'    # Image to scan
          format: 'table'    # Output format
          ignore-unfixed: true    # Skip vulnerabilities without fixes
          vuln-type: 'os,library'    # Types of vulnerabilities to scan
          severity: 'MEDIUM,HIGH,CRITICAL'    # Severity levels to include
          output: 'docker-image-scan.json'    # Save results to file

      # Upload scan results as an artifact
      - name: Upload Docker Trivy Report
        uses: actions/upload-artifact@v4.3.0
        with:
          name: docker-image-scan
          path: docker-image-scan.json

  # Final job: Create a summary of all jobs
  build_summary:
    needs: [code-unit-testing, build-and-scan-image]    # Wait for both previous jobs
    runs-on: ubuntu-latest
    steps:
      # Create a markdown summary of job statuses
      - name: Adding markdown
        run: |
          # Get status of previous jobs
          CODE_UNIT_STATUS="${{ needs.code-unit-testing.outputs.status }}"
          DOCKER_SCAN_STATUS="${{ needs.build-and-scan-image.outputs.status }}"
          
          # Create markdown table for job status summary
          echo '## ðŸš€ Preparing Build Summary ðŸš€' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo "| Job Name | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| code-unit-testing | $CODE_UNIT_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| docker-scan | $DOCKER_SCAN_STATUS |" >> $GITHUB_STEP_SUMMARY